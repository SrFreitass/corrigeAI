generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String                @id @default(uuid())
  name                String
  email               String                @unique
  password            String
  role                String                @default("student")
  points              Int                   @default(0)
  createdAt           DateTime              @default(now())
  email_verified      Boolean               @default(false)
  Answers             AnswersLectures[]
  Lectures            Lectures[]
  EssaysUsers         EssaysUsers[]
  AnswersQuestions    AnswersQuestions[]
  UsersLectureHistory UsersLectureHistory[]
}

model Courses {
  id                  String                @id @default(uuid())
  title               String
  description         String                @default("")
  createdAt           DateTime              @default(now())
  schoolSubject_id    String
  updateAt            DateTime?
  Lectures            Lectures[]
  schoolSubject       SchoolSubjects        @relation(fields: [schoolSubject_id], references: [id])
  UsersLectureHistory UsersLectureHistory[]
}

model Lectures {
  id                  String                @id @default(uuid())
  title               String
  description         String
  video_url           String                @default("")
  teacher_id          String
  createdAt           DateTime              @default(now())
  updateAt            DateTime?
  course_id           String
  Answers             AnswersLectures[]
  Teacher             Users                 @relation(fields: [teacher_id], references: [id])
  Courses             Courses               @relation(fields: [course_id], references: [id])
  Lessons             Lessons[]
  UsersLectureHistory UsersLectureHistory[]
}

model Lessons {
  id             String            @id @default(uuid())
  title          String
  description    String
  lecture_id     String
  image_url      String?
  options        String[]
  createdAt      DateTime          @default(now())
  answer         Int
  answer_img_url String?
  answer_text    String?
  Answers        AnswersLectures[]
  lecture        Lectures          @relation(fields: [lecture_id], references: [id])
}

model Questions {
  id               String             @id @default(uuid())
  year             Int
  entity           String
  question         String
  description      String[]
  figures          String[]
  options          String[]
  answer           String
  createdAt        DateTime           @default(now())
  enemSubject_id   String
  enemSubject      EnemSubjects       @relation(fields: [enemSubject_id], references: [id])
  AnswersQuestions AnswersQuestions[]
}

model EnemSubjects {
  id             String           @id @default(uuid())
  name           String
  SchoolSubjects SchoolSubjects[]
  Questions      Questions[]
}

model SchoolSubjects {
  id             String       @id @default(uuid())
  name           String
  enemSubject_id String
  Courses        Courses[]
  enemsubjects   EnemSubjects @relation(fields: [enemSubject_id], references: [id])
}

model AnswersQuestions {
  id          String    @id @default(uuid())
  question_id String
  user_id     String
  correct     Boolean
  createdAt   DateTime  @default(now())
  option      Int
  Questions   Questions @relation(fields: [question_id], references: [id])
  Users       Users     @relation(fields: [user_id], references: [id])
}

model AnswersLectures {
  id         String   @id @default(uuid())
  lesson_id  String
  lecture_id String
  user_id    String
  correct    Boolean
  createdAt  DateTime @default(now())
  option     Int
  Lectures   Lectures @relation(fields: [lecture_id], references: [id])
  Lesson     Lessons  @relation(fields: [lesson_id], references: [id])
  Users      Users    @relation(fields: [user_id], references: [id])
}

model EssaysUsers {
  id          String   @id @default(uuid())
  user_id     String
  createdAt   DateTime @default(now())
  theme_id    String
  entity      String
  title       String?
  essay       String
  points      Int
  result      String
  Users       Users    @relation(fields: [user_id], references: [id])
  Essays      Essays   @relation(fields: [theme_id], references: [id])
}

model Essays {
  id        String   @id @default(uuid())
  essay_img String
  title     String
  texts     String[]
  figures   String[]
  year      Int
  entity    String
  createdAt DateTime @default(now())
  EssayUsers EssaysUsers[]
}

model UsersLectureHistory {
  id         String   @id @default(uuid())
  user_id    String
  lecture_id String
  course_id  String
  Lecture    Lectures @relation(fields: [lecture_id], references: [id])
  Users      Users    @relation(fields: [user_id], references: [id])
  Courses    Courses  @relation(fields: [course_id], references: [id])
}
